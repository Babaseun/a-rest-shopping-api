{"version":3,"sources":["../../../src/usingDB/controllers/products.js"],"names":["Product","create","req","res","text","values","body","picture","numberOfRooms","location","price","user","id","Date","db","query","rows","status","send","getAll","findAllQuery","rowCount","getOne","params","message","update","findOneQuery","updateOneQuery","response","delete","deleteQuery"],"mappings":"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","file":"products.js","sourcesContent":["import moment from 'moment';\r\nimport uuidv4 from 'uuid/v4';\r\nimport db from '../db/index';\r\n\r\nconst Product = {\r\n  async create(req, res) {\r\n    const text = `INSERT INTO products(id ,\r\n            picture ,\r\n            numberOfRooms ,\r\n            location,\r\n            price,\r\n            owner_id,\r\n            isAdmin,\r\n            created_date,\r\n            modified_date)VALUES($1,$2,$3,$4,$5,$6,$7,$8,$9) returning *`;\r\n    const values = [\r\n      uuidv4(),\r\n      req.body.picture,\r\n      req.body.numberOfRooms,\r\n      req.body.location,\r\n      req.body.price,\r\n      req.user.id,\r\n      false,\r\n      moment(new Date()),\r\n      moment(new Date())\r\n    ];\r\n    try {\r\n      const { rows } = await db.query(text, values);\r\n\r\n      return res.status(201).send(rows[0]);\r\n    } catch (error) {\r\n      return res.status(400).send(error);\r\n    }\r\n  },\r\n  async getAll(req, res) {\r\n    const findAllQuery = 'SELECT * FROM products where owner_id = $1';\r\n    try {\r\n      const { rows, rowCount } = await db.query(findAllQuery, [req.user.id]);\r\n\r\n      return res.status(200).send({ rows, rowCount });\r\n    } catch (error) {\r\n      return res.status(400).send(error);\r\n    }\r\n  },\r\n  async getOne(req, res) {\r\n    const text = 'SELECT * FROM products WHERE id = $1 AND owner_id = $2';\r\n    try {\r\n      const { rows } = await db.query(text, [req.params.id, req.user.id]);\r\n      if (!rows[0]) {\r\n        return res.status(404).send({ message: 'product not found' });\r\n      }\r\n      return res.status(200).send(rows[0]);\r\n    } catch (error) {\r\n      return res.status(400).send(error);\r\n    }\r\n  },\r\n  async update(req, res) {\r\n    const findOneQuery =\r\n      'SELECT * FROM products WHERE id=$1 AND owner_id = $2';\r\n    const updateOneQuery = `UPDATE products\r\n      SET picture=$1,numberOfRooms=$2,location=$3,price=$4, modified_date=$5,\r\n      WHERE id=$6 AND owner_id = $7 returning *`;\r\n    try {\r\n      const { rows } = await db.query(findOneQuery, [\r\n        req.params.id,\r\n        req.user.id\r\n      ]);\r\n      if (!rows[0]) {\r\n        return res.status(404).send({ message: 'product not found' });\r\n      }\r\n      const values = [\r\n        req.body.picture || rows[0].picture,\r\n        req.body.numberOfRooms || rows[0].numberOfRooms,\r\n        req.body.location || rows[0].location,\r\n        req.body.picture || rows[0].picture,\r\n        moment(new Date()),\r\n        req.params.id,\r\n        req.user.id\r\n      ];\r\n      const response = await db.query(updateOneQuery, values);\r\n      return res.status(200).send(response.rows[0]);\r\n    } catch (err) {\r\n      return res.status(400).send(err);\r\n    }\r\n  },\r\n  async delete(req, res) {\r\n    const deleteQuery =\r\n      'DELETE FROM products WHERE id=$1 AND owner_id = $2 returning *';\r\n    try {\r\n      const { rows } = await db.query(deleteQuery, [\r\n        req.params.id,\r\n        req.user.id\r\n      ]);\r\n      if (!rows[0]) {\r\n        return res.status(404).send({ message: 'product not found' });\r\n      }\r\n      return res.status(200).send({ message: 'deleted' });\r\n    } catch (error) {\r\n      return res.status(400).send(error);\r\n    }\r\n  }\r\n};\r\nexport default Product;\r\n"]}