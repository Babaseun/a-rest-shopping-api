{"version":3,"sources":["../../../src/usingDB/middleware/Auth.js"],"names":["Auth","verifyToken","req","res","next","token","headers","status","send","message","jwt","verify","process","env","SECRET","decoded","text","db","query","userId","rows","user","id"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;;;AAEA,IAAMA,OAAO;AACLC,aADK;AAAA,wFACOC,GADP,EACYC,GADZ,EACiBC,IADjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEHC,mBAFG,GAEKH,IAAII,OAAJ,CAAY,gBAAZ,CAFL;;AAAA,kBAGJD,KAHI;AAAA;AAAA;AAAA;;AAAA,+CAIAF,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,uBAAX,EAArB,CAJA;;AAAA;AAAA;AAAA;AAAA,qBAQeC,uBAAIC,MAAJ,CAAWN,KAAX,EAAkBO,QAAQC,GAAR,CAAYC,MAA9B,CARf;;AAAA;AAQDC,qBARC;AASDC,kBATC,GASM,mCATN;AAAA;AAAA,qBAUgBC,gBAAGC,KAAH,CAASF,IAAT,EAAe,CAACD,QAAQI,MAAT,CAAf,CAVhB;;AAAA;AAAA;AAUCC,kBAVD,SAUCA,IAVD;;AAAA,kBAWFA,KAAK,CAAL,CAXE;AAAA;AAAA;AAAA;;AAAA,+CAYEjB,IACJI,MADI,CACG,GADH,EAEJC,IAFI,CAEC,EAAEC,SAAS,mCAAX,EAFD,CAZF;;AAAA;;AAiBPP,kBAAImB,IAAJ,GAAW,EAAEC,IAAIP,QAAQI,MAAd,EAAX;AACAf;AAlBO;AAAA;;AAAA;AAAA;AAAA;AAAA,+CAoBAD,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,aApBA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,CAAb;;kBAyBeR,I","file":"Auth.js","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport db from '../db/index';\r\n\r\nconst Auth = {\r\n  async verifyToken(req, res, next) {\r\n    const token = req.headers['x-access-token'];\r\n    if (!token) {\r\n      return res.status(400).send({ message: 'Token is not provided' });\r\n    }\r\n\r\n    try {\r\n      const decoded = await jwt.verify(token, process.env.SECRET);\r\n      const text = 'SELECT * FROM users WHERE id = $1';\r\n      const { rows } = await db.query(text, [decoded.userId]);\r\n      if (!rows[0]) {\r\n        return res\r\n          .status(400)\r\n          .send({ message: 'The token you provided is invalid' });\r\n      }\r\n\r\n      req.user = { id: decoded.userId };\r\n      next();\r\n    } catch (error) {\r\n      return res.status(400).send(error);\r\n    }\r\n  }\r\n};\r\n\r\nexport default Auth;\r\n"]}