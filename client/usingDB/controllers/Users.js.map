{"version":3,"sources":["../../../src/usingDB/controllers/Users.js"],"names":["User","create","req","res","body","email","password","status","send","message","Helper","isValidEmail","hashPassword","createQuery","values","firstname","lastname","phonenumber","address","Date","db","query","rows","token","generateToken","id","routine","login","text","comparePassword","delete","deleteQuery","user"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEA,IAAMA,OAAO;AACLC,QADK;AAAA,wFACEC,GADF,EACOC,GADP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEL,CAACD,IAAIE,IAAJ,CAASC,KAAV,IAAmB,CAACH,IAAIE,IAAJ,CAASE,QAFxB;AAAA;AAAA;AAAA;;AAAA,+CAGAH,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,yBAAX,EAArB,CAHA;;AAAA;AAAA,kBAKJC,iBAAOC,YAAP,CAAoBT,IAAIE,IAAJ,CAASC,KAA7B,CALI;AAAA;AAAA;AAAA;;AAAA,+CAMAF,IACJI,MADI,CACG,GADH,EAEJC,IAFI,CAEC,EAAEC,SAAS,oCAAX,EAFD,CANA;;AAAA;AAUHG,0BAVG,GAUYF,iBAAOE,YAAP,CAAoBV,IAAIE,IAAJ,CAASE,QAA7B,CAVZ;AAYHO,yBAZG;AAgBHC,oBAhBG,GAgBM,CACb,kBADa,EAEbZ,IAAIE,IAAJ,CAASW,SAFI,EAGbb,IAAIE,IAAJ,CAASY,QAHI,EAIbd,IAAIE,IAAJ,CAASa,WAJI,EAKbf,IAAIE,IAAJ,CAASc,OALI,EAMbhB,IAAIE,IAAJ,CAASC,KANI,EAObO,YAPa,EAQb,KARa,EASb,sBAAO,IAAIO,IAAJ,EAAP,CATa,EAUb,sBAAO,IAAIA,IAAJ,EAAP,CAVa,CAhBN;AAAA;AAAA;AAAA,qBA8BgBC,gBAAGC,KAAH,CAASR,WAAT,EAAsBC,MAAtB,CA9BhB;;AAAA;AAAA;AA8BCQ,kBA9BD,SA8BCA,IA9BD;AA+BDC,mBA/BC,GA+BOb,iBAAOc,aAAP,CAAqBF,KAAK,CAAL,EAAQG,EAA7B,CA/BP;AAAA,+CAgCAtB,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEe,YAAF,EAArB,CAhCA;;AAAA;AAAA;AAAA;;AAAA,oBAkCH,YAAMG,OAAN,KAAkB,kBAlCf;AAAA;AAAA;AAAA;;AAAA,+CAmCEvB,IACJI,MADI,CACG,GADH,EAEJC,IAFI,CAEC,EAAEC,SAAS,oCAAX,EAFD,CAnCF;;AAAA;AAAA,+CAuCAN,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,aAvCA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA0CLmB,OA1CK;AAAA,0FA0CCzB,GA1CD,EA0CMC,GA1CN;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,oBA2CL,CAACD,IAAIE,IAAJ,CAASC,KAAV,IAAmB,CAACH,IAAIE,IAAJ,CAASE,QA3CxB;AAAA;AAAA;AAAA;;AAAA,gDA4CAH,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,yBAAX,EAArB,CA5CA;;AAAA;AAAA,kBA8CJC,iBAAOC,YAAP,CAAoBT,IAAIE,IAAJ,CAASC,KAA7B,CA9CI;AAAA;AAAA;AAAA;;AAAA,gDA+CAF,IACJI,MADI,CACG,GADH,EAEJC,IAFI,CAEC,EAAEC,SAAS,oCAAX,EAFD,CA/CA;;AAAA;AAmDHmB,kBAnDG,GAmDI,sCAnDJ;AAAA;AAAA;AAAA,qBAqDgBR,gBAAGC,KAAH,CAASO,IAAT,EAAe,CAAC1B,IAAIE,IAAJ,CAASC,KAAV,CAAf,CArDhB;;AAAA;AAAA;AAqDCiB,kBArDD,SAqDCA,IArDD;;AAAA,kBAsDFA,KAAK,CAAL,CAtDE;AAAA;AAAA;AAAA;;AAAA,gDAuDEnB,IACJI,MADI,CACG,GADH,EAEJC,IAFI,CAEC,EAAEC,SAAS,2CAAX,EAFD,CAvDF;;AAAA;AAAA,kBA2DFC,iBAAOmB,eAAP,CAAuBP,KAAK,CAAL,EAAQhB,QAA/B,EAAyCJ,IAAIE,IAAJ,CAASE,QAAlD,CA3DE;AAAA;AAAA;AAAA;;AAAA,gDA4DEH,IACJI,MADI,CACG,GADH,EAEJC,IAFI,CAEC,EAAEC,SAAS,2CAAX,EAFD,CA5DF;;AAAA;AAgEDc,mBAhEC,GAgEOb,iBAAOc,aAAP,CAAqBF,KAAK,CAAL,EAAQG,EAA7B,CAhEP;AAAA,gDAkEAtB,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEe,YAAF,EAArB,CAlEA;;AAAA;AAAA;AAAA;AAAA,gDAoEApB,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,cApEA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAuELsB,QAvEK;AAAA,0FAuEE5B,GAvEF,EAuEOC,GAvEP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAwEH4B,yBAxEG,GAwEW,2CAxEX;AAAA;AAAA;AAAA,qBA0EgBX,gBAAGC,KAAH,CAASU,WAAT,EAAsB,CAAC7B,IAAI8B,IAAJ,CAASP,EAAV,CAAtB,CA1EhB;;AAAA;AAAA;AA0ECH,kBA1ED,SA0ECA,IA1ED;;AAAA,kBA2EFA,KAAK,CAAL,CA3EE;AAAA;AAAA;AAAA;;AAAA,gDA4EEnB,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,gBAAX,EAArB,CA5EF;;AAAA;AAAA,gDA8EAN,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,SAAX,EAArB,CA9EA;;AAAA;AAAA;AAAA;AAAA,gDAgFAN,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,cAhFA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,CAAb;;kBAqFeR,I","file":"Users.js","sourcesContent":["import moment from 'moment';\r\nimport uuidv4 from 'uuid/v4';\r\nimport db from '../db/index';\r\nimport Helper from './Helper';\r\n\r\nconst User = {\r\n  async create(req, res) {\r\n    if (!req.body.email || !req.body.password) {\r\n      return res.status(400).send({ message: 'Some values are missing' });\r\n    }\r\n    if (!Helper.isValidEmail(req.body.email)) {\r\n      return res\r\n        .status(400)\r\n        .send({ message: 'Please enter a valid email address' });\r\n    }\r\n    const hashPassword = Helper.hashPassword(req.body.password);\r\n\r\n    const createQuery = `INSERT INTO\r\n      users(id,firstname,lastname,phonenumber,address, email, password,isAdmin, created_date, modified_date)\r\n      VALUES($1, $2, $3, $4, $5,$6,$7,$8,$9,$10)\r\n      returning *`;\r\n    const values = [\r\n      uuidv4(),\r\n      req.body.firstname,\r\n      req.body.lastname,\r\n      req.body.phonenumber,\r\n      req.body.address,\r\n      req.body.email,\r\n      hashPassword,\r\n      false,\r\n      moment(new Date()),\r\n      moment(new Date())\r\n    ];\r\n\r\n    try {\r\n      const { rows } = await db.query(createQuery, values);\r\n      const token = Helper.generateToken(rows[0].id);\r\n      return res.status(201).send({ token });\r\n    } catch (error) {\r\n      if (error.routine === '_bt_check_unique') {\r\n        return res\r\n          .status(400)\r\n          .send({ message: 'User with that EMAIL already exist' });\r\n      }\r\n      return res.status(400).send(error);\r\n    }\r\n  },\r\n  async login(req, res) {\r\n    if (!req.body.email || !req.body.password) {\r\n      return res.status(400).send({ message: 'Some values are missing' });\r\n    }\r\n    if (!Helper.isValidEmail(req.body.email)) {\r\n      return res\r\n        .status(400)\r\n        .send({ message: 'Please enter a valid email address' });\r\n    }\r\n    const text = 'SELECT * FROM users WHERE email = $1';\r\n    try {\r\n      const { rows } = await db.query(text, [req.body.email]);\r\n      if (!rows[0]) {\r\n        return res\r\n          .status(400)\r\n          .send({ message: 'The credentials you provided is incorrect' });\r\n      }\r\n      if (!Helper.comparePassword(rows[0].password, req.body.password)) {\r\n        return res\r\n          .status(400)\r\n          .send({ message: 'The credentials you provided is incorrect' });\r\n      }\r\n      const token = Helper.generateToken(rows[0].id);\r\n\r\n      return res.status(200).send({ token });\r\n    } catch (error) {\r\n      return res.status(400).send(error);\r\n    }\r\n  },\r\n  async delete(req, res) {\r\n    const deleteQuery = 'DELETE FROM users WHERE id=$1 returning *';\r\n    try {\r\n      const { rows } = await db.query(deleteQuery, [req.user.id]);\r\n      if (!rows[0]) {\r\n        return res.status(404).send({ message: 'user not found' });\r\n      }\r\n      return res.status(204).send({ message: 'deleted' });\r\n    } catch (error) {\r\n      return res.status(400).send(error);\r\n    }\r\n  }\r\n};\r\n\r\nexport default User;\r\n"]}